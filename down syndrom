import os
import pandas as pd

# נתיב מלא - ודא שהוא קיים אצלך בדיוק כך
base_path = '/Users/galshemesh/Downloads/Dataset for Fetus Framework/Dataset for Fetus Framework/Set1-Training-Validation Sets CNN/Standard'

# איסוף הנתונים
data = []
for filename in os.listdir(base_path):
    if filename.endswith('.png'):
        filepath = os.path.join(base_path, filename)
        data.append({'filename': filename, 'label': 'Standard', 'filepath': filepath})

df = pd.DataFrame(data)

print(df.head())
print(f"סה״כ תמונות תקניות לאימון: {len(df)}")

# הצגת תמונות לדוגמה
import matplotlib.pyplot as plt
import cv2

sample = df.sample(6)

plt.figure(figsize=(12, 6))
for i, row in enumerate(sample.itertuples()):
    img = cv2.imread(row.filepath)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    plt.subplot(2, 3, i + 1)
    plt.imshow(img_rgb)
    plt.title(row.label)
    plt.axis('off')

plt.tight_layout()
plt.show()
import numpy as np
import cv2
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical

# קבועים
IMG_SIZE = 128

# המרת תמונות למערכים
images = []
labels = []

for row in df.itertuples():
    img = cv2.imread(row.filepath)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    images.append(img)
    labels.append(1)  # כל התמונות פה הן תקניות

images = np.array(images) / 255.0  # נורמליזציה
labels = np.array(labels)
print("מספר תמונות:", len(images))
print("גודל תמונה:", images[0].shape)
print("חלוקה ל-train/test...")

# חלוקה ל-train ו-validation
X_train, X_val, y_train, y_val = train_test_split(images, labels, test_size=0.2, random_state=42)

print("train shape:", X_train.shape)
print("val shape:", X_val.shape)

X_train, X_val, y_train, y_val = train_test_split(images, labels, test_size=0.2, random_state=42)

# מודל CNN פשוט
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')  # כי זו משימת בינארית (Standard / Non-standard)
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# אימון
print("מתחיל לאמן את המודל...")

history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10, batch_size=32)
